{"version":3,"sources":["components/EspressoApp/Section.js/Section.jsx","components/EspressoApp/Statistics/Statistics.jsx","components/EspressoApp/FeedbackOptions/FeedbackOptions.jsx","components/EspressoApp/Notification/Notification.jsx","components/EspressoApp/Expresso/Expresso.js","App.jsx","index.jsx","components/EspressoApp/Statistics/Statistics.module.css"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","className","s","item","FeedbackOptions","options","onLeaveFeedback","buttonList","map","option","type","onClick","slice","toLocaleUpperCase","Notification","message","Expresso","state","leaveFeedback","setState","prevState","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","countPercentage","Math","round","this","keys","Component","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"0NAceA,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACb,gCACG,6BAAKD,IACJC,M,gBCiBQC,EAnBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OAChB,+BACG,qBAAIC,UAAWC,IAAEC,KAAjB,mBAA8BP,KAC9B,qBAAIK,UAAWC,IAAEC,KAAjB,sBAAiCN,KACjC,qBAAII,UAAWC,IAAEC,KAAjB,kBAA6BL,KAC7B,qBAAIG,UAAWC,IAAEC,KAAjB,oBAA+BJ,KAC/B,qBAAIE,UAAWC,IAAEC,KAAjB,gCAA2CH,EAA3C,W,gBCSSI,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACrB,qBAAKL,UAAWC,IAAEK,WAAlB,SACKF,EAAQG,KAAI,SAAAC,GAAM,OACjB,wBAAqBC,KAAK,SAASC,QAAS,kBAAML,EAAgBG,IAAlE,SACIA,EAAOG,MAAM,EAAG,GAAGC,oBAAsBJ,EAAOG,MAAM,IAD7CH,SCMPK,EAVM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAClB,8BACIA,KCIDC,E,4MAMHC,MAAQ,CACLrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGRoB,cAAgB,SAACD,GACd,EAAKE,UAAS,SAAAC,GAAS,sBACnBH,EAAQG,EAAUH,GAAS,O,EAIlCI,mBAAqB,WAClB,OAAOC,OAAOC,OAAO,EAAKN,OAAOO,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAExEC,gCAAkC,WAC/B,IAAMC,EAAkBC,KAAKC,MAAa,EAAKb,MAAMrB,KAAO,EAAKyB,qBAA9B,KACnC,OAAOO,EAAkB,EACpBA,EACA,G,uDAKL,IAAM7B,EAAQgC,KAAKV,qBACbrB,EAAqB+B,KAAKJ,kCAEhC,OACG,qCACG,cAAC,EAAD,CAASlC,MAAM,wBAAf,SACG,cAAC,EAAD,CACGY,QAASiB,OAAOU,KAAKD,KAAKd,OAC1BX,gBAAiByB,KAAKb,kBAG5B,cAAC,EAAD,CAASzB,MAAM,aAAf,SACIM,EAAQ,EACJ,cAAE,EAAF,CACCH,KAAMmC,KAAKd,MAAMrB,KACjBC,QAASkC,KAAKd,MAAMpB,QACpBC,IAAKiC,KAAKd,MAAMnB,IAChBC,MAAOA,EACPC,mBAAoBA,IAGrB,cAAC,EAAD,CAAce,QAAQ,+B,GAnDnBkB,aAAjBjB,EAEIkB,aAAe,GA0DVlB,QClEA,SAASmB,IACtB,OACE,8BACE,cAAC,EAAD,MCANC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACH,EAAD,MAEFI,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,KAAO,2B","file":"static/js/main.3f3287f9.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n   <div>\r\n      <h2>{title}</h2>\r\n      {children}\r\n   </div>\r\n);\r\n\r\n\r\nSection.propTypes = {\r\n   title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;","import s from './Statistics.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n   <ul>\r\n      <li className={s.item}>Good: {good}</li>\r\n      <li className={s.item}>Neutral: {neutral}</li>\r\n      <li className={s.item}>Bad: {bad}</li>\r\n      <li className={s.item}>Total: {total}</li>\r\n      <li className={s.item}>Positive feedback: {positivePercentage}%</li>\r\n   </ul>\r\n);\r\n\r\nStatistics.propTypes = {\r\n   good: PropTypes.number.isRequired,\r\n   neutral: PropTypes.number.isRequired,\r\n   bad: PropTypes.number.isRequired,\r\n   total: PropTypes.number.isRequired,\r\n   positivePercentage: PropTypes.number.isRequired,\r\n\r\n};\r\n\r\nexport default Statistics;","import s from './FeedbackOptions.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n   <div className={s.buttonList}>\r\n      { options.map(option => (\r\n         <button key={option} type=\"button\" onClick={() => onLeaveFeedback(option)}>\r\n            {option.slice(0, 1).toLocaleUpperCase() + option.slice(1)}\r\n         </button>\r\n      ))}\r\n   </div >\r\n)\r\n\r\nFeedbackOptions.propTypes = {\r\n   onLeaveFeedback: PropTypes.func.isRequired,\r\n   options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n   <div>\r\n      {message}\r\n   </div>\r\n)\r\n\r\nNotification.propTypes = {\r\n   message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","\r\nimport { Component } from 'react'\r\nimport Section from '../Section.js/Section'\r\nimport Statistics from '../Statistics/Statistics'\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions'\r\nimport Notification from '../Notification/Notification'\r\n\r\n\r\nclass Expresso extends Component {\r\n\r\n   static defaultProps = {}\r\n\r\n   static propTypes = {}\r\n\r\n   state = {\r\n      good: 0,\r\n      neutral: 0,\r\n      bad: 0,\r\n   }\r\n\r\n   leaveFeedback = (state) => {\r\n      this.setState(prevState => ({\r\n         [state]: prevState[state] + 1\r\n      }))\r\n   }\r\n\r\n   countTotalFeedback = () => {\r\n      return Object.values(this.state).reduce((acc, value) => acc + value, 0);\r\n   }\r\n   countPositiveFeedbackPercentage = () => {\r\n      const countPercentage = Math.round(100 * (this.state.good / this.countTotalFeedback()));\r\n      return countPercentage > 0\r\n         ? countPercentage\r\n         : 0;\r\n   }\r\n\r\n   render() {\r\n\r\n      const total = this.countTotalFeedback();\r\n      const positivePercentage = this.countPositiveFeedbackPercentage();\r\n\r\n      return (\r\n         <>\r\n            <Section title=\"Please leave feedback\">\r\n               <FeedbackOptions\r\n                  options={Object.keys(this.state)}\r\n                  onLeaveFeedback={this.leaveFeedback}\r\n               />\r\n            </Section>\r\n            <Section title=\"Statistics\">\r\n               {total > 0\r\n                  ? < Statistics\r\n                     good={this.state.good}\r\n                     neutral={this.state.neutral}\r\n                     bad={this.state.bad}\r\n                     total={total}\r\n                     positivePercentage={positivePercentage}\r\n                  />\r\n\r\n                  : <Notification message=\"No feedback given\"></Notification>\r\n\r\n               }\r\n            </Section>\r\n         </>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Expresso;","import Expresso from './components/EspressoApp/Expresso/Expresso'\n\nexport default function App() {\n  return (\n    <div>\n      <Expresso></Expresso>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Statistics_item__314kx\"};"],"sourceRoot":""}